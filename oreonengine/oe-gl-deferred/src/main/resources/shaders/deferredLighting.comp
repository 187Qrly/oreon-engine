#version 430 core

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba16f) uniform writeonly image2D defferedSceneImage;

layout (binding = 2, rgba16f) uniform readonly image2DMS albedoSceneImage;

layout (binding = 3, rgba32f) uniform readonly image2DMS worldPositionImage;

layout (binding = 4, rgba32f) uniform readonly image2DMS normalImage;

layout (binding = 5, rgba16f)   uniform readonly image2DMS specular_emission_diffuse_ssao_bloom_Image;

layout (binding = 6, r8) uniform readonly image2D sampleCoverageMask;

layout (binding = 7, r16f) uniform readonly image2D ssaoBlurImage;

layout (std140, row_major) uniform Camera{
	vec3 eyePosition;
	mat4 m_View;
	mat4 m_ViewProjection;
	vec4 frustumPlanes[6];
};

layout (std140) uniform DirectionalLight{
	vec3 direction;
	float intensity;
	vec3 ambient;
	vec3 color;
} directional_light;

layout (std140, row_major) uniform LightViewProjections{
	mat4 m_lightViewProjection[5];
	float splitRange[4];
};

uniform sampler2DArray pssm;
uniform int numSamples;
uniform float sightRangeFactor;
uniform int ssaoEnable;
uniform vec3 fogColor;
uniform int shadowsEnable;

const int shadowMapResolution = 4096;
const float zfar = 10000;
const float znear = 0.1;

float diffuse(vec3 direction, vec3 normal, float intensity)
{
	if (direction.y < -0.33)
	{
		direction.y = -0.33;
		direction = normalize(direction);
	}
	return max(0.0, dot(normal, -direction) * intensity);
}

float specular(vec3 direction, vec3 normal, vec3 eyePosition, vec3 vertexPosition, float specularFactor, float emissionFactor)
{
	vec3 reflectionVector = normalize(reflect(direction, normal));
	vec3 vertexToEye = normalize(eyePosition - vertexPosition);
	
	float specular = max(0.0, dot(vertexToEye, reflectionVector));
	
	return pow(specular, specularFactor) * emissionFactor;
}

float getFogFactor(float dist)
{
	return clamp(smoothstep(0.0,1.0,-0.0002/sightRangeFactor*(dist-(zfar)/10*sightRangeFactor) + 1),0.0,1.0);
}

float linearizeDepth(float depth)
{
	return (2 * znear) / (zfar + znear - depth * (zfar - znear));
}

float percentageCloserShadows(vec3 projCoords, int split, float shadowFactor){

	float currentDepth = projCoords.z;
	float shadowMapDepth = texture(pssm, vec3(projCoords.xy,split)).r;
	
	float dist = linearizeDepth(shadowMapDepth) - linearizeDepth(currentDepth);
		
	if (dist < 0)
		return 0;
	else 
		return 1;
}

float varianceShadow(vec3 projCoords, int split, int kernels){
	
	float shadowFactor = 1.0;
	float texelSize = 1.0/ shadowMapResolution;
	float currentDepth = projCoords.z;
	float reduceFactor = 1/ pow(kernels*2+1,2);
	
	for (int i=-kernels; i<=kernels; i++){
		for (int j=-kernels; j<=kernels; j++){
			float shadowMapDepth = texture(pssm, vec3(projCoords.xy,split)
													   + vec3(i,j,0) * texelSize).r; 
			if (currentDepth > shadowMapDepth)
				shadowFactor -= reduceFactor;
		}
	}
	
	return max(0.1,shadowFactor);
}


float applyShadowMapping(vec3 worldPos)
{
	float shadowFactor = 1;
	float terrainShadow = 1;
	vec3 projCoords = vec3(0,0,0);
	float linDepth = (m_View * vec4(worldPos,1)).z/zfar;
	
	vec4 lightSpacePos = m_lightViewProjection[4] * vec4(worldPos,1.0);
	projCoords = lightSpacePos.xyz * 0.5 + 0.5;
	terrainShadow = varianceShadow(projCoords,6,9);
	
	if (linDepth <= splitRange[0]){
		vec4 lightSpacePos = m_lightViewProjection[0] * vec4(worldPos,1.0);
		projCoords = lightSpacePos.xyz * 0.5 + 0.5;
		shadowFactor = varianceShadow(projCoords,0,4);
	}
	else if (linDepth <= splitRange[1]){
		vec4 lightSpacePos = m_lightViewProjection[1] * vec4(worldPos,1.0);
		projCoords = lightSpacePos.xyz * 0.5 + 0.5;
		shadowFactor = varianceShadow(projCoords,1,4);
	}
	else if (linDepth <= splitRange[2]){
		vec4 lightSpacePos = m_lightViewProjection[2] * vec4(worldPos,1.0);
		projCoords = lightSpacePos.xyz * 0.5 + 0.5;
		shadowFactor = varianceShadow(projCoords,2,2);
	}
	else if (linDepth <= splitRange[3]){
		vec4 lightSpacePos = m_lightViewProjection[3] * vec4(worldPos,1.0);
		projCoords = lightSpacePos.xyz * 0.5 + 0.5;
		shadowFactor = varianceShadow(projCoords,3,2);
	}
	
	return min(terrainShadow, shadowFactor);
}

void main(void){

	ivec2 computeCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	
	vec3 finalColor = vec3(0);
	vec3 albedo = vec3(0);
	vec3 position = vec3(0);
	vec4 normal = vec4(0);
	vec4 sspecular_emission_diffuse_ssao_bloom = vec4(0);
	vec3 depth = vec3(0);
	
	float diff = 1;
	float shadow = 1;
	float spec = 1;
	
	if(imageLoad(sampleCoverageMask, computeCoord).r == 1.0){
		
		for (int i=0; i<numSamples; i++){
			
			albedo = imageLoad(albedoSceneImage, computeCoord,i).rgb; 
			normal = imageLoad(normalImage, computeCoord,i).rbga; 
			
			// prevent lighting atmosphere
			if (normal.a != 0){
				position = imageLoad(worldPositionImage, computeCoord,i).rgb; 
				sspecular_emission_diffuse_ssao_bloom = imageLoad(specular_emission_diffuse_ssao_bloom_Image, computeCoord,i).rgba; 
				
				spec = specular(directional_light.direction, normal.xyz, eyePosition, position, sspecular_emission_diffuse_ssao_bloom.r,
					sspecular_emission_diffuse_ssao_bloom.g);
				
				if (shadowsEnable == 1)
					shadow = applyShadowMapping(position);
				
				int diffuseEnable = int(sspecular_emission_diffuse_ssao_bloom.z/10.0);
				float ssao = sspecular_emission_diffuse_ssao_bloom.z - (diffuseEnable * 10);
				
				if (ssao == 1)
					ssao = imageLoad(ssaoBlurImage, computeCoord).r;
				else
					ssao = 1;
				
				if (diffuseEnable == 0)
					normal.xyz = vec3(0,1,0);
					
				if (ssaoEnable == 0)
					ssao = 1;
				
				diff = diffuse(directional_light.direction, normal.xyz, directional_light.intensity);
				vec3 diffuseLight = directional_light.ambient + directional_light.color * diff * shadow;
				vec3 specularLight = directional_light.color * spec * (shadow-0.1);
				
				vec3 sampleColor = albedo * diffuseLight * ssao + specularLight;
					
				float dist = length(eyePosition - position);
				float fogFactor = getFogFactor(dist);
				finalColor += mix(fogColor, sampleColor, fogFactor);
			}
			else{
				finalColor += albedo;
			}
		}
		finalColor /= numSamples;
	}
	else {
		
		albedo = imageLoad(albedoSceneImage, computeCoord,0).rgb;
		normal = imageLoad(normalImage, computeCoord,0).rbga;
		
		if (normal.a != 0){
			position = imageLoad(worldPositionImage, computeCoord,0).rgb;
			sspecular_emission_diffuse_ssao_bloom = imageLoad(specular_emission_diffuse_ssao_bloom_Image, computeCoord,0).rgba;
		
			spec = specular(directional_light.direction, normal.xyz, eyePosition, position, sspecular_emission_diffuse_ssao_bloom.r,
				sspecular_emission_diffuse_ssao_bloom.g);
			
			if (shadowsEnable == 1)
				shadow = applyShadowMapping(position);
			
			int diffuseEnable = int(sspecular_emission_diffuse_ssao_bloom.z/10.0);
			float ssao = sspecular_emission_diffuse_ssao_bloom.z - (diffuseEnable * 10);
			
			if (ssao == 1)
				ssao = imageLoad(ssaoBlurImage, computeCoord).r;
			else
				ssao = 1;
			
			if (diffuseEnable == 0)
				normal.xyz = vec3(0,1,0);
				
			if (ssaoEnable == 0)
				ssao = 1;
				
			diff = diffuse(directional_light.direction, normal.xyz, directional_light.intensity);
			vec3 diffuseLight = directional_light.ambient + directional_light.color * diff * shadow;
			vec3 specularLight = directional_light.color * spec * (shadow-0.1);
			
			finalColor = albedo * diffuseLight * ssao + specularLight;
				
			float dist = length(eyePosition - position);
			float fogFactor = getFogFactor(dist);
			finalColor = mix(fogColor, finalColor, fogFactor);
		}
		else{
			finalColor = albedo;
		}
	}
	
	imageStore(defferedSceneImage, computeCoord, vec4(finalColor,1.0));
}